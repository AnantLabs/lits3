#summary Some examples of using LitS3

== Uploading the contents of a String ==

{{{
s3.AddObjectString("some simple string content", "MyBucket", "test-object");
}}}

== Uploading a local file ==

{{{
s3.AddObject(@"C:\MyFile.txt", "MyBucket", "test-file");
}}}

== Uploading anything using a Stream ==

{{{
var request = new AddObjectRequest(s3, "MyBucket", "test-stream");
request.ContentLength = 36;

// Add some metadata
request.Metadata["meaning-of-life"] = "42";

// This will call out to the S3 server and initiate an upload
using (Stream requestStream = request.GetRequestStream())
{
    // Create a StreamWriter to write some text data
    var writer = new StreamWriter(requestStream, Encoding.ASCII);
    writer.Write("This will be written directly to S3.");
    writer.Flush();
}

// We're finished, so get the response to finish our submission. Remember to Close() it!
request.GetResponse().Close();
}}}

== Downloading small text files into a String ==

{{{
Console.WriteLine(s3.GetObjectString("MyBucket", "test-object"));
}}}

== Downloading from S3 to a local file ==

{{{
s3.GetObject("MyBucket", "test-file", @"C:\MyFileReturned");
}}}

== Downloading anything into a Stream ==

{{{
var request = new GetObjectRequest(s3, "MyBucket", "test-stream");

using (GetObjectResponse response = request.GetResponse())
{
    // At this point you may read the object's Metadata, if any
    Console.WriteLine("Meaning of life: " + response.Metadata["meaning-of-life"]); // prints "42"    

    // Create a StreamReader to read the text data we stored above
    var reader = new StreamReader(response.GetResponseStream(), Encoding.ASCII);
    Console.WriteLine(reader.ReadLine());
}
}}}

== Downloading only object Metadata ==

{{{
var metadataOnly = true;
var request = new GetObjectRequest(s3, "MyBucket", "test-stream", metadataOnly);

using (GetObjectResponse response = request.GetResponse())
    Console.WriteLine("Meaning of life: " + response.Metadata["meaning-of-life"]); // prints "42"    
}}}

== Downloading with progress updates ==

Thanks to Atif, you can use `S3Service.AddObjectProgress` and `S3Service.GetObjectProgress` to be notified when `S3Service` uploads or downloads data for you. Note that this is not threadsafe, so you should construct a new `S3Service` object instance for each of your threads that use it. 

{{{
s3.AddObjectProgress += (s, e) => Console.WriteLine("Progress: " + e.ProgressPercentage);
s3.AddObjectString("Hello world", "lits3-demo", "Test File.txt");

//> Progress: 0
//> Progress: 40
//> ...
//> Progress: 100
}}}

The procedure is similar for uploading, in that case you would use `GetRequestStream()` and write data into that.