#summary Some examples of using LitS3

== Uploading Files ==

{{{
// Create a file on S3 from the contents of a string
s3.AddObjectString("some simple string content", "MyBucket", "test-object");

// Upload a local file 
s3.AddObject(@"C:\MyFile.txt", "MyBucket", "test-file");

// Upload dynamically from a stream
var request = new AddObjectRequest(s3, "MyBucket", "test-stream");
request.ContentLength = 36;

// This will call out to the S3 server and initiate an upload
using (Stream requestStream = request.GetRequestStream())
{
    // Create a StreamWriter to write some text data
    var writer = new StreamWriter(requestStream, Encoding.ASCII);
    writer.Write("This will be written directly to S3.");
    writer.Flush();
}

// We're finished, so get the response to finish our submission. Remember to Close() it!
request.GetResponse().Close();
}}}

== Downloading Files ==

{{{
// Get the contents of a file on S3 as a string
Console.WriteLine(s3.GetObjectString("MyBucket", "test-object"));

// Download a file from S3 into a local file
s3.GetObject("MyBucket", "test-file", @"C:\MyFileReturned");

// Download dynamically into a stream
var request = new GetObjectRequest(s3, "MyBucket", "test-stream");

using (GetObjectResponse response = request.GetResponse())
{
    // Create a StreamReader to read the text data we stored above
    var reader = new StreamReader(response.GetResponseStream(), Encoding.ASCII);
    Console.WriteLine(reader.ReadLine());
}
}}}

== Downloading with progress updates ==

If you need to start measuring upload/download progress then you can't use the "helper" method of `S3Service` anymore, you'll need to use the `AddObjectRequest`/`GetObjectRequest` directly, and implement your own stream copying, with periodic progress updates.

{{{
// Download dynamically into a stream
var request = new GetObjectRequest(s3, "MyBucket", "my-big-file");

using (GetObjectResponse response = request.GetResponse())
{
    var buffer = new byte[31768];
    var bytesDownloaded = 0;
    var responseStream = response.GetResponseStream();

    while (bytesDownloaded < response.ContentLength)
    {
        var bytesRead = responseStream.Read(buffer, 0, buffer.Length);
        
        // write the downloaded data somewhere...
        
        bytesDownloaded += bytesRead;

        var percent = (int)(((float)bytesDownloaded / (float)response.ContentLength) * 100);

        Console.CursorLeft = 0;
        Console.Write("Downloading... {0}%", percent);
    }
}
}}}

The procedure is similar for uploading, in that case you would use `GetRequestStream()` and write data into that.